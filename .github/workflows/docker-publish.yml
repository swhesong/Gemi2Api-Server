# .github/workflows/docker-publish.yml (最终完美版)

name: Docker Build and Push

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-push:
    # 关键点 1: 工作流本身运行在 Linux 环境中
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # =================================================================
      # ▼▼▼ 自动化核心步骤 ▼▼▼
      # 在 Linux 环境中，为 Linux 目标动态生成正确的 requirements.txt
      # =================================================================
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv (modern Python packager)
        run: pip install uv
      
      - name: Generate Linux-compatible requirements.txt
        # 关键点 2: 这条命令在 Linux (ubuntu-latest) 上运行，
        # uv 会自动解析出适合 Linux 的依赖，不会包含 pywin32 等包。
        run: uv pip compile pyproject.toml -o requirements.txt
        
      # (可选) 查看生成的 requirements.txt 内容，方便调试
      - name: Display generated requirements.txt
        run: cat requirements.txt
      # =================================================================
      # ▲▲▲ 自动化核心步骤结束 ▲▲▲
      # =================================================================

      - name: Set up QEMU for multi-platform build
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push multi-platform Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          # 关键点 3: Docker Buildx 会为 amd64 和 arm64 分别构建。
          # 它会使用上面生成的同一个 requirements.txt 文件。
          # pip 在各自的架构下安装时，会自动下载对应架构的包。
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            devinglaw/genmini2api:latest
            devinglaw/genmini2api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
