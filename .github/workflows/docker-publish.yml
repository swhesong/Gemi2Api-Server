name: Docker Build and Push

on:
  push:
    branches: [ "main" ] # 当 main 分支有更新时触发

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # ================== 新增的关键步骤 ==================
      # 这一步将在构建 Docker 镜像之前，在 GitHub Runner (Linux) 环境中
      # 为我们的项目生成一个与 Linux 平台匹配的 uv.lock 文件。
      - name: Generate platform-specific lockfile
        run: |
          # 安装 uv 工具
          curl -LsSf https://astral.sh/uv/install.sh | sh
          # 将 uv 添加到 PATH，以便后续命令可以找到它
          source /home/runner/.cargo/env
          # 根据 pyproject.toml 生成一个与 Linux (构建环境) 匹配的 uv.lock 文件
          # 这个新生成的 uv.lock 将在后续的 build-push 步骤中被复制到 Docker 镜像里
          uv lock --python 3.12
          echo "✅ Generated uv.lock for Linux platform"
      # ====================================================

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            devinglaw/genmini2api:latest
            # devinglaw/genmini2api:amd64-latest  # 注意：buildx v5 不再自动为平台创建单独的标签
            # devinglaw/genmini2api:arm64-latest  # 您可以为每个平台创建单独的构建 job 如果需要
          # 移除 build-args，因为镜像源已在 pyproject.toml 中配置
          # build-args: |
          #   PIP_INDEX_URL=https://pypi.tuna.tsinghua.edu.cn/simple
