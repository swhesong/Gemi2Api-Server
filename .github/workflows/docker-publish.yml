# .github/workflows/docker-publish.yml (最终集成专家版 - 推荐)

name: Docker Build and Push

# 触发器：
# 1. 在 GitHub 上创建新的 Release 时自动触发。
# 2. 允许在 Actions 页面手动触发。
on:
  # ▼▼▼ 变更 1: 增加 push 触发器 ▼▼▼
  # 触发器 1: 当有代码推送到 main 分支时自动触发
  push:
    branches:
      - main  # 重要：如果您的主分支是 master，请将这里改为 master

  # 触发器 2: 在 GitHub 上创建新的 Release 时自动触发
  release:
    types: [created]
  # 触发器 3: 允许在 Actions 页面手动触发
  workflow_dispatch:
    inputs:
      tag:
        description: '可选：为手动构建指定一个 Docker 标签 (如: test-feature)'
        # ▼▼▼ 变更 1: 将其设为可选，以启用默认标签功能 ▼▼▼
        required: false
        type: string

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      # 步骤 1: 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步骤 2: 修复 Shell 脚本的行尾
      - name: Ensure LF line endings for shell scripts
        run: |
          if ! command -v dos2unix &> /dev/null; then
            sudo apt-get update -y > /dev/null && sudo apt-get install -y dos2unix > /dev/null
          fi
          find . -type f -name "*.sh" -exec dos2unix {} +

      # 步骤 3: 自动生成最新的 requirements.txt
      - name: Set up Python for dependency generation
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv for rapid dependency resolution
        run: pip install uv
      
      - name: Generate requirements.txt from pyproject.toml
        run: uv pip compile pyproject.toml --quiet -o requirements.txt
      
      # 步骤 4: 设置 QEMU (用于多平台构建)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 步骤 5: 设置 Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 步骤 6: 登录到 Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 步骤 7: 使用官方 Action 专业地提取元数据 (标签和注释)
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: devinglaw/genmini2api
          tags: |
            # 规则 1: 用于 Release (例如 v1.2.3 -> 1.2.3, 1.2, latest)
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

            # ▼▼▼ 变更 2: 增加 push 到主分支的标签规则 ▼▼▼
            # 规则 2: 用于 push 到主分支时，自动打上 commit-sha 和 latest 标签
            # 这样每次提交都会有一个带哈希的可追溯版本和一个最新的 latest 版本
            type=sha,prefix=,enable={{is_default_branch}}

            # 规则 3: 用于手动触发 (workflow_dispatch)
            type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag != '' }}

            # ▼▼▼ 变更 3: 智能后备标签规则 ▼▼▼
            # 规则3: 如果是手动触发且用户没有输入tag，则使用 commit sha 作为标签
            type=sha,prefix=dev-,enable=${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag == '' }}
            
            # 规则4 (安全发布): 仅在创建 Release 时，才将镜像标记为 latest
            type=raw,value=latest,enable=${{ github.event_name == 'release' }}

      # 步骤 8: 构建与推送
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
